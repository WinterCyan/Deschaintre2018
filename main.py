from Model.ModelParts import *

if __name__ == '__main__':
    x = torch.randn(5, 64, 128, 128)
    x_gb = torch.randn(5, 128)
    encoder = Encoder(c_in=64, c_out=128, c_gb_in=128, c_gb_out=256)
    unet_output, global_output = encoder.forward(unet_input=x, global_input=x_gb)
    print('running encoder')
    print(unet_output.shape)
    print(global_output.shape)
    print()

    z = torch.randn(5, 128, 64, 64)
    z_link = torch.randn(5, 128, 64, 64)
    z_gb = torch.randn(5, 128)
    decoder = Decoder(c_in=128, c_link=128, c_out=64, c_gb_in=128, c_gb_out=64)
    unet_output2, global_output2 = decoder.forward(unet_input=z, link_input=z_link, global_input=z_gb)
    print('running decoder')
    print(unet_output2.shape)
    print(global_output2.shape)
    print()

    x2 = torch.randn(5, 3, 256, 256)
    encoder = InitEncoder(c_in=3, c_out=64, c_gb_out=128)
    unet_output, global_output = encoder.forward(unet_input=x2)
    print('running init encoder')
    print(unet_output.shape)
    print(global_output.shape)
    print()

    x2 = torch.randn(5, 8*64, 2, 2)
    x_gb2 = torch.randn(5, 8*64)
    encoder = LastEncoder(c_in=8*64, c_out=8*64, c_gb_in=8*64, c_gb_out=8*64)
    unet_output, global_output = encoder.forward(unet_input=x2, global_input=x_gb2)
    print('running last encoder')
    print(unet_output.shape)
    print(global_output.shape)
    print()

    z2 = torch.randn(5, 64, 128, 128)
    z_link2 = torch.randn(5, 64, 128, 128)
    z_gb2 = torch.randn(5, 64)
    decoder = LastDecoder(c_in=64, c_link=64, c_out=9, c_gb_in=64)
    unet_output2 = decoder.forward(unet_input=z2, link_input=z_link2, global_input=z_gb2)
    print('running last decoder')
    print(unet_output2.shape)
